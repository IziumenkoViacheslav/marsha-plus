/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Staking,
  StakingInterface,
} from "../../../../contracts/chatGpt/staking.sol/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_stakingDurationInDays",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakedBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingEndTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000d0f38038062000d0f833981810160405281019062000037919062000189565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506201518081620000c99190620001ff565b42620000d691906200024a565b600281905550505062000285565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011682620000e9565b9050919050565b620001288162000109565b81146200013457600080fd5b50565b60008151905062000148816200011d565b92915050565b6000819050919050565b62000163816200014e565b81146200016f57600080fd5b50565b600081519050620001838162000158565b92915050565b60008060408385031215620001a357620001a2620000e4565b5b6000620001b38582860162000137565b9250506020620001c68582860162000172565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200020c826200014e565b915062000219836200014e565b925082820262000229816200014e565b91508282048414831517620002435762000242620001d0565b5b5092915050565b600062000257826200014e565b915062000264836200014e565b92508282019050808211156200027f576200027e620001d0565b5b92915050565b610a7a80620002956000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638ac334871161005b5780638ac33487146100da5780638da5cb5b146100f8578063a694fc3a14610116578063fc0c546a146101325761007d565b80631460fa87146100825780632def6620146100b2578063817b1cd2146100bc575b600080fd5b61009c6004803603810190610097919061056d565b610150565b6040516100a991906105b3565b60405180910390f35b6100ba610168565b005b6100c461035d565b6040516100d191906105b3565b60405180910390f35b6100e2610363565b6040516100ef91906105b3565b60405180910390f35b610100610369565b60405161010d91906105dd565b60405180910390f35b610130600480360381019061012b9190610624565b61038f565b005b61013a6104e6565b60405161014791906106b0565b60405180910390f35b60046020528060005260406000206000915090505481565b6002544210156101ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a49061074e565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022b906107ba565b60405180910390fd5b600060646005836102459190610809565b61024f919061087a565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33838561029a91906108ab565b6040518363ffffffff1660e01b81526004016102b79291906108df565b6020604051808303816000875af11580156102d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fa9190610940565b506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160036000828254610352919061096d565b925050819055505050565b60035481565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025442106103d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ca906109ed565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161043093929190610a0d565b6020604051808303816000875af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610940565b5080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c391906108ab565b9250508190555080600360008282546104dc91906108ab565b9250508190555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061053a8261050f565b9050919050565b61054a8161052f565b811461055557600080fd5b50565b60008135905061056781610541565b92915050565b6000602082840312156105835761058261050a565b5b600061059184828501610558565b91505092915050565b6000819050919050565b6105ad8161059a565b82525050565b60006020820190506105c860008301846105a4565b92915050565b6105d78161052f565b82525050565b60006020820190506105f260008301846105ce565b92915050565b6106018161059a565b811461060c57600080fd5b50565b60008135905061061e816105f8565b92915050565b60006020828403121561063a5761063961050a565b5b60006106488482850161060f565b91505092915050565b6000819050919050565b600061067661067161066c8461050f565b610651565b61050f565b9050919050565b60006106888261065b565b9050919050565b600061069a8261067d565b9050919050565b6106aa8161068f565b82525050565b60006020820190506106c560008301846106a1565b92915050565b600082825260208201905092915050565b7f5374616b696e6720706572696f6420686173206e6f7420656e6465642079657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006107386021836106cb565b9150610743826106dc565b604082019050919050565b600060208201905081810360008301526107678161072b565b9050919050565b7f4e6f20746f6b656e7320746f20756e7374616b652e0000000000000000000000600082015250565b60006107a46015836106cb565b91506107af8261076e565b602082019050919050565b600060208201905081810360008301526107d381610797565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108148261059a565b915061081f8361059a565b925082820261082d8161059a565b91508282048414831517610844576108436107da565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006108858261059a565b91506108908361059a565b9250826108a05761089f61084b565b5b828204905092915050565b60006108b68261059a565b91506108c18361059a565b92508282019050808211156108d9576108d86107da565b5b92915050565b60006040820190506108f460008301856105ce565b61090160208301846105a4565b9392505050565b60008115159050919050565b61091d81610908565b811461092857600080fd5b50565b60008151905061093a81610914565b92915050565b6000602082840312156109565761095561050a565b5b60006109648482850161092b565b91505092915050565b60006109788261059a565b91506109838361059a565b925082820390508181111561099b5761099a6107da565b5b92915050565b7f5374616b696e6720706572696f642068617320656e6465642e00000000000000600082015250565b60006109d76019836106cb565b91506109e2826109a1565b602082019050919050565b60006020820190508181036000830152610a06816109ca565b9050919050565b6000606082019050610a2260008301866105ce565b610a2f60208301856105ce565b610a3c60408301846105a4565b94935050505056fea264697066735822122049cd64ff98bfcdca84b7dabad328290e34cde051145c61f6e29ab82b122b6c5764736f6c63430008120033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    _stakingDurationInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(
      _token,
      _stakingDurationInDays,
      overrides || {}
    ) as Promise<Staking>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    _stakingDurationInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token,
      _stakingDurationInDays,
      overrides || {}
    );
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
