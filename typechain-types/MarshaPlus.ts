/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MarshaPlusInterface extends utils.Interface {
  functions: {
    "advisor()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "community()": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositTokenToStaking(uint256,string)": FunctionFragment;
    "developer()": FunctionFragment;
    "foundation()": FunctionFragment;
    "kill()": FunctionFragment;
    "marketing()": FunctionFragment;
    "owner()": FunctionFragment;
    "stakingByPeriod(address,string)": FunctionFragment;
    "swaping(uint256,uint256)": FunctionFragment;
    "technical()": FunctionFragment;
    "token_name()": FunctionFragment;
    "token_symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferTo(address,uint256)": FunctionFragment;
    "withdrawTokenFromStaking(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "advisor"
      | "balanceOf"
      | "community"
      | "decimals"
      | "depositTokenToStaking"
      | "developer"
      | "foundation"
      | "kill"
      | "marketing"
      | "owner"
      | "stakingByPeriod"
      | "swaping"
      | "technical"
      | "token_name"
      | "token_symbol"
      | "totalSupply"
      | "transferTo"
      | "withdrawTokenFromStaking"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "advisor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "community", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositTokenToStaking",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "foundation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(functionFragment: "marketing", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingByPeriod",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swaping",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "technical", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token_name",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token_symbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenFromStaking",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "advisor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "community", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenToStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foundation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingByPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swaping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "technical", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token_name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token_symbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenFromStaking",
    data: BytesLike
  ): Result;

  events: {
    "Reward(uint256)": EventFragment;
    "Staking(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface RewardEventObject {
  amount: BigNumber;
}
export type RewardEvent = TypedEvent<[BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface StakingEventObject {
  amount: BigNumber;
}
export type StakingEvent = TypedEvent<[BigNumber], StakingEventObject>;

export type StakingEventFilter = TypedEventFilter<StakingEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MarshaPlus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarshaPlusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    advisor(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    community(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    depositTokenToStaking(
      _amount: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    developer(overrides?: CallOverrides): Promise<[string]>;

    foundation(overrides?: CallOverrides): Promise<[string]>;

    kill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketing(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    stakingByPeriod(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; tokens: BigNumber }>;

    swaping(
      _amount1: PromiseOrValue<BigNumberish>,
      _amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    technical(overrides?: CallOverrides): Promise<[string]>;

    token_name(overrides?: CallOverrides): Promise<[string]>;

    token_symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferTo(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenFromStaking(
      period: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  advisor(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  community(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  depositTokenToStaking(
    _amount: PromiseOrValue<BigNumberish>,
    _period: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  developer(overrides?: CallOverrides): Promise<string>;

  foundation(overrides?: CallOverrides): Promise<string>;

  kill(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketing(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  stakingByPeriod(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { date: BigNumber; tokens: BigNumber }>;

  swaping(
    _amount1: PromiseOrValue<BigNumberish>,
    _amount2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  technical(overrides?: CallOverrides): Promise<string>;

  token_name(overrides?: CallOverrides): Promise<string>;

  token_symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferTo(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenFromStaking(
    period: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    advisor(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    community(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    depositTokenToStaking(
      _amount: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    developer(overrides?: CallOverrides): Promise<string>;

    foundation(overrides?: CallOverrides): Promise<string>;

    kill(overrides?: CallOverrides): Promise<void>;

    marketing(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    stakingByPeriod(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; tokens: BigNumber }>;

    swaping(
      _amount1: PromiseOrValue<BigNumberish>,
      _amount2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    technical(overrides?: CallOverrides): Promise<string>;

    token_name(overrides?: CallOverrides): Promise<string>;

    token_symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferTo(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawTokenFromStaking(
      period: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Reward(uint256)"(amount?: null): RewardEventFilter;
    Reward(amount?: null): RewardEventFilter;

    "Staking(uint256)"(amount?: null): StakingEventFilter;
    Staking(amount?: null): StakingEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    advisor(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    community(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokenToStaking(
      _amount: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    developer(overrides?: CallOverrides): Promise<BigNumber>;

    foundation(overrides?: CallOverrides): Promise<BigNumber>;

    kill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketing(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    stakingByPeriod(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swaping(
      _amount1: PromiseOrValue<BigNumberish>,
      _amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    technical(overrides?: CallOverrides): Promise<BigNumber>;

    token_name(overrides?: CallOverrides): Promise<BigNumber>;

    token_symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferTo(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokenFromStaking(
      period: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    advisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    community(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokenToStaking(
      _amount: PromiseOrValue<BigNumberish>,
      _period: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    developer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foundation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kill(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingByPeriod(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swaping(
      _amount1: PromiseOrValue<BigNumberish>,
      _amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    technical(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token_name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token_symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferTo(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenFromStaking(
      period: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
